// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataLayer.Context
{
    using DataLayer.Entities;
    using DataLayer.Maps;
    using DataLayer.Repositories;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class DataLayerDbContext : Microsoft.AspNet.Identity.EntityFramework.IdentityDbContext<DataLayer.Context.DataLayerIdentityUser>, IDataLayerDbContext
    {
        public System.Data.Entity.DbSet<ToDoItem> ToDoItems { get; set; } // ToDoItems

        static DataLayerDbContext()
        {
            System.Data.Entity.Database.SetInitializer<DataLayerDbContext>(null);
        }

        public DataLayerDbContext()
            : base("Name=")
        {
            InitializePartial();
        }

        public DataLayerDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public DataLayerDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public DataLayerDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public DataLayerDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        //public DataLayerDbContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
        //    : base(objectContext, dbContextOwnsObjectContext)
        //{
        //    InitializePartial();
        //}

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ToDoItemConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ToDoItemConfiguration(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
		static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);        

        // Stored Procedures
        public int DeleteToDoItems(long? toDoItemId)
        {
            var toDoItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoItemId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = toDoItemId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!toDoItemId.HasValue)
                toDoItemIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_toDoItems] @toDoItemId", toDoItemIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertToDoItems(long? toDoItemId, string toDoItem, bool? toDoStrikeThrough)
        {
            var toDoItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoItemId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = toDoItemId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!toDoItemId.HasValue)
                toDoItemIdParam.Value = System.DBNull.Value;

            var toDoItemParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoItem", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = toDoItem, Size = 256 };
            if (toDoItemParam.Value == null)
                toDoItemParam.Value = System.DBNull.Value;

            var toDoStrikeThroughParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoStrikeThrough", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = toDoStrikeThrough.GetValueOrDefault() };
            if (!toDoStrikeThrough.HasValue)
                toDoStrikeThroughParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_toDoItems] @toDoItemId, @toDoItem, @toDoStrikeThrough", toDoItemIdParam, toDoItemParam, toDoStrikeThroughParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SelectToDoItemsReturnModel> SelectToDoItems()
        {
            int procResult;
            return SelectToDoItems(out procResult);
        }

        public System.Collections.Generic.List<SelectToDoItemsReturnModel> SelectToDoItems(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SelectToDoItemsReturnModel>("EXEC @procResult = [dbo].[select_toDoItems] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SelectToDoItemsReturnModel>> SelectToDoItemsAsync()
        {
            var procResultData = await Database.SqlQuery<SelectToDoItemsReturnModel>("EXEC [dbo].[select_toDoItems] ").ToListAsync();

            return procResultData;
        }

        public int UpdateToDoItems(long? toDoItemId, string toDoItem, bool? toDoStrikeThrough)
        {
            var toDoItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoItemId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = toDoItemId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!toDoItemId.HasValue)
                toDoItemIdParam.Value = System.DBNull.Value;

            var toDoItemParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoItem", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = toDoItem, Size = 256 };
            if (toDoItemParam.Value == null)
                toDoItemParam.Value = System.DBNull.Value;

            var toDoStrikeThroughParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@toDoStrikeThrough", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = toDoStrikeThrough.GetValueOrDefault() };
            if (!toDoStrikeThrough.HasValue)
                toDoStrikeThroughParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[update_toDoItems] @toDoItemId, @toDoItem, @toDoStrikeThrough", toDoItemIdParam, toDoItemParam, toDoStrikeThroughParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
